{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","components/Form/Form.tsx","servises/NewTodoId.ts","App.tsx","servises/VisibleTodos.ts","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","cn","completed","title","TodoList","todos","map","username","valuesOfForm","selectUser","hasError","hasErrorTitle","hasErrorUser","Form","onAdd","useState","fieldsForm","setFieldsForm","hasErrorText","setHasErrorText","handleChangeFields","value","field","current","handleErrorFields","action","method","onSubmit","event","preventDefault","isTitleExists","trim","isSelectUser","htmlFor","type","placeholder","onChange","target","required","disabled","usersFromServer","getNewTodoId","Math","max","users","visibleToDos","userId","find","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e02196bb.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User | null;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import cn from 'classnames';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={cn(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => {\n        return (\n          <TodoInfo\n            todo={todo}\n            key={todo.id}\n            data-id={todo.id}\n          />\n        );\n      })}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { useState } from 'react';\nimport { User } from '../../types/User';\nimport usersFromServer from '../../api/users';\nimport { FieldsForm } from '../../types/FieldsForm';\n\ntype Props = {\n  onAdd: (newTodo: FieldsForm) => void\n};\n\nconst valuesOfForm = {\n  title: '',\n  selectUser: 0,\n};\n\nconst hasError = {\n  hasErrorTitle: false,\n  hasErrorUser: false,\n};\n\nexport const Form: React.FC<Props> = ({ onAdd }) => {\n  const [fieldsForm, setFieldsForm] = useState<FieldsForm>(valuesOfForm);\n  const [hasErrorText, setHasErrorText] = useState(hasError);\n\n  const handleChangeFields = (\n    value: string | number,\n    field: string | number,\n  ) => {\n    setFieldsForm(current => ({ ...current, [field]: value }));\n  };\n\n  const handleErrorFields = (\n    field: string,\n    value: boolean,\n  ) => {\n    setHasErrorText(current => ({ ...current, [field]: value }));\n  };\n\n  const resetFieldsForm = () => {\n    setFieldsForm(valuesOfForm);\n    handleErrorFields('hasErrorTitle', false);\n    handleErrorFields('hasErrorUser', false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const isTitleExists = fieldsForm.title.trim();\n    const isSelectUser = fieldsForm.selectUser;\n\n    if (!isTitleExists) {\n      handleErrorFields('hasErrorTitle', true);\n    }\n\n    if (!isSelectUser) {\n      handleErrorFields('hasErrorUser', true);\n    }\n\n    if (!isTitleExists || !isSelectUser) {\n      return;\n    }\n\n    onAdd(fieldsForm);\n    resetFieldsForm();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"title\">\n          Title:\n        </label>\n\n        <input\n          id=\"title\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={fieldsForm.title}\n          onChange={(event) => {\n            handleChangeFields(event.target.value, 'title');\n          }}\n        />\n\n        {hasErrorText.hasErrorTitle && !fieldsForm.title && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"user\">\n          User:\n        </label>\n\n        <select\n          id=\"user\"\n          data-cy=\"userSelect\"\n          value={fieldsForm.selectUser}\n          onChange={(event) => {\n            handleChangeFields(+event.target.value, 'selectUser');\n          }}\n          required\n        >\n          <option value={0} disabled>Choose a user</option>\n\n          {usersFromServer.map((user: User) => {\n            return (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            );\n          })}\n        </select>\n\n        {hasErrorText.hasErrorUser && !fieldsForm.selectUser && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function getNewTodoId(todos: Todo[]) {\n  return Math.max(...todos.map(todo => todo.id)) + 1;\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { getVisibleToDos } from './servises/VisibleTodos';\nimport { Form } from './components/Form';\nimport { getNewTodoId } from './servises/NewTodoId';\nimport { FieldsForm } from './types/FieldsForm';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nconst visibleToDos = getVisibleToDos(usersFromServer, todosFromServer);\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(visibleToDos);\n\n  const addNewTodo = ({ title, selectUser }: FieldsForm) => {\n    const newTodo = {\n      id: getNewTodoId(todos),\n      title,\n      completed: false,\n      userId: selectUser,\n      user: usersFromServer\n        .find((user: User) => user.id === selectUser) || null,\n    };\n\n    setTodos((currentTodos: Todo[]) => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <Form\n        onAdd={addNewTodo}\n      />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nexport const getVisibleToDos = (users: User[], todos: Todo[]): Todo[] => {\n  return todos.map(todo => {\n    return {\n      ...todo,\n      user: users.find(user => user.id === todo.userId) || null,\n    };\n  });\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}